@model CinemaX.Models.Filme

@{
    ViewData["Title"] = "Details";

    string duracao = Model.Duracao + "h";
}

<h1>Details</h1>

<div>
    <h4>Filme</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Nome)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Nome)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Realizador)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Realizador)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Data)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Data)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Descrição)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Descrição)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Duracao)
        </dt>
        <dd class="col-sm-10">
            @duracao
        </dd>
        <dt class="col-sm-2">
            Categorias:
        </dt>
        <dd class="col-sm-10">
            @{int CategoriasCount = Model.CategoriasFilmes.Count; }
            @foreach (var Categoria in Model.CategoriasFilmes)
            {
                CategoriasCount--;
                @Categoria.IdCategoriaNavigation.Nome;
                if (CategoriasCount != 0)
                {<label>,</label> }
                else 
                {<label>.</label>}

            }
        </dd>
    </dl>
    <br/>
    <h4>Trailer:</h4>
    <div id="player"></div>

    <script>
        // 2. This code loads the IFrame Player API code asynchronously.
        var tag = document.createElement('script');

        tag.src = "https://www.youtube.com/iframe_api";
        var firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

        // 3. This function creates an <iframe> (and YouTube player)
        //    after the API code downloads.
        var player;
        function onYouTubeIframeAPIReady() {
            player = new YT.Player('player', {
                height: '360',
                width: '640',
                videoId: '@Model.LinkTrailer.Remove(0,32)',
                events: {
                    'onStateChange': onPlayerStateChange,
                    'autoplay': 0
                }
            });
        }

        // 4. The API will call this function when the video player is ready.
        function onPlayerReady(event) {
            event.target.playVideo();
        }

        // 5. The API calls this function when the player's state changes.
        //    The function indicates that when playing a video (state=1),
        //    the player should play for six seconds and then stop.
        var done = false;
        function onPlayerStateChange(event) {
            if (event.data == YT.PlayerState.PLAYING && !done) {
                setTimeout(stopVideo, 6000);
                done = true;
            }
        }
        function stopVideo() {
            player.stopVideo();
        }
    </script>
</div>
